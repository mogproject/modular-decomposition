from typing import Any

def configuration_model(
    deg_sequence, create_using: Any | None = ..., seed: Any | None = ...
): ...
def directed_configuration_model(
    in_degree_sequence,
    out_degree_sequence,
    create_using: Any | None = ...,
    seed: Any | None = ...,
): ...
def expected_degree_graph(w, seed: Any | None = ..., selfloops: bool = ...): ...
def havel_hakimi_graph(deg_sequence, create_using: Any | None = ...): ...
def directed_havel_hakimi_graph(
    in_deg_sequence, out_deg_sequence, create_using: Any | None = ...
): ...
def degree_sequence_tree(deg_sequence, create_using: Any | None = ...): ...
def random_degree_sequence_graph(
    sequence, seed: Any | None = ..., tries: int = ...
): ...

class DegreeSequenceRandomGraph:
    rng: Any
    degree: Any
    m: Any
    dmax: Any
    def __init__(self, degree, rng) -> None: ...
    remaining_degree: Any
    graph: Any
    def generate(self): ...
    def update_remaining(self, u, v, aux_graph: Any | None = ...) -> None: ...
    def p(self, u, v): ...
    def q(self, u, v): ...
    def suitable_edge(self): ...
    def phase1(self) -> None: ...
    def phase2(self) -> None: ...
    def phase3(self) -> None: ...
