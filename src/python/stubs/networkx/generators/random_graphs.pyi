from typing import Any

def fast_gnp_random_graph(n, p, seed: Any | None = ..., directed: bool = ...): ...
def gnp_random_graph(n, p, seed: Any | None = ..., directed: bool = ...): ...

binomial_graph = gnp_random_graph
erdos_renyi_graph = gnp_random_graph

def dense_gnm_random_graph(n, m, seed: Any | None = ...): ...
def gnm_random_graph(n, m, seed: Any | None = ..., directed: bool = ...): ...
def newman_watts_strogatz_graph(n, k, p, seed: Any | None = ...): ...
def watts_strogatz_graph(n, k, p, seed: Any | None = ...): ...
def connected_watts_strogatz_graph(
    n, k, p, tries: int = ..., seed: Any | None = ...
): ...
def random_regular_graph(d, n, seed: Any | None = ...): ...
def barabasi_albert_graph(
    n, m, seed: Any | None = ..., initial_graph: Any | None = ...
): ...
def dual_barabasi_albert_graph(
    n, m1, m2, p, seed: Any | None = ..., initial_graph: Any | None = ...
): ...
def extended_barabasi_albert_graph(n, m, p, q, seed: Any | None = ...): ...
def powerlaw_cluster_graph(n, m, p, seed: Any | None = ...): ...
def random_lobster(n, p1, p2, seed: Any | None = ...): ...
def random_shell_graph(constructor, seed: Any | None = ...): ...
def random_powerlaw_tree(
    n, gamma: int = ..., seed: Any | None = ..., tries: int = ...
): ...
def random_powerlaw_tree_sequence(
    n, gamma: int = ..., seed: Any | None = ..., tries: int = ...
): ...
def random_kernel_graph(
    n, kernel_integral, kernel_root: Any | None = ..., seed: Any | None = ...
): ...
