from collections.abc import Generator
from typing import Any

class GraphMatcher:
    G1: Any
    G2: Any
    G1_nodes: Any
    G2_nodes: Any
    G2_node_order: Any
    old_recursion_limit: Any
    test: str
    def __init__(self, G1, G2) -> None: ...
    def reset_recursion_limit(self) -> None: ...
    def candidate_pairs_iter(self) -> Generator[Any, None, None]: ...
    core_1: Any
    core_2: Any
    inout_1: Any
    inout_2: Any
    state: Any
    mapping: Any
    def initialize(self) -> None: ...
    def is_isomorphic(self): ...
    def isomorphisms_iter(self) -> None: ...
    def match(self) -> Generator[Any, None, None]: ...
    def semantic_feasibility(self, G1_node, G2_node): ...
    def subgraph_is_isomorphic(self): ...
    def subgraph_is_monomorphic(self): ...
    def subgraph_isomorphisms_iter(self) -> None: ...
    def subgraph_monomorphisms_iter(self) -> None: ...
    def syntactic_feasibility(self, G1_node, G2_node): ...

class DiGraphMatcher(GraphMatcher):
    def __init__(self, G1, G2) -> None: ...
    def candidate_pairs_iter(self) -> Generator[Any, None, None]: ...
    core_1: Any
    core_2: Any
    in_1: Any
    in_2: Any
    out_1: Any
    out_2: Any
    state: Any
    mapping: Any
    def initialize(self) -> None: ...
    def syntactic_feasibility(self, G1_node, G2_node): ...

class GMState:
    GM: Any
    G1_node: Any
    G2_node: Any
    depth: Any
    def __init__(
        self, GM, G1_node: Any | None = ..., G2_node: Any | None = ...
    ) -> None: ...
    def restore(self) -> None: ...

class DiGMState:
    GM: Any
    G1_node: Any
    G2_node: Any
    depth: Any
    def __init__(
        self, GM, G1_node: Any | None = ..., G2_node: Any | None = ...
    ) -> None: ...
    def restore(self) -> None: ...
