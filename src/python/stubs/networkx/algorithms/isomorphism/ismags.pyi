from collections.abc import Generator
from typing import Any

class ISMAGS:
    graph: Any
    subgraph: Any
    node_equality: Any
    edge_equality: Any
    def __init__(
        self,
        graph,
        subgraph,
        node_match: Any | None = ...,
        edge_match: Any | None = ...,
        cache: Any | None = ...,
    ): ...
    def find_isomorphisms(self, symmetry: bool = ...) -> Generator[Any, None, Any]: ...
    def largest_common_subgraph(
        self, symmetry: bool = ...
    ) -> Generator[Any, None, None]: ...
    def analyze_symmetry(self, graph, node_partitions, edge_colors): ...
    def is_isomorphic(self, symmetry: bool = ...): ...
    def subgraph_is_isomorphic(self, symmetry: bool = ...): ...
    def isomorphisms_iter(self, symmetry: bool = ...) -> None: ...
    def subgraph_isomorphisms_iter(self, symmetry: bool = ...): ...
