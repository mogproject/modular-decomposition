from typing import Any

class MinHeap:
    class _Item:
        key: Any
        value: Any
        def __init__(self, key, value) -> None: ...

    def __init__(self) -> None: ...
    def min(self) -> None: ...
    def pop(self) -> None: ...
    def get(self, key, default: Any | None = ...) -> None: ...
    def insert(self, key, value, allow_increase: bool = ...) -> None: ...
    def __nonzero__(self): ...
    def __bool__(self): ...
    def __len__(self): ...
    def __contains__(self, key): ...

class PairingHeap(MinHeap):
    class _Node(MinHeap._Item):
        left: Any
        next: Any
        prev: Any
        parent: Any
        def __init__(self, key, value) -> None: ...

    def __init__(self) -> None: ...
    def min(self): ...
    def pop(self): ...
    def get(self, key, default: Any | None = ...): ...
    def insert(self, key, value, allow_increase: bool = ...): ...

class BinaryHeap(MinHeap):
    def __init__(self) -> None: ...
    def min(self): ...
    def pop(self): ...
    def get(self, key, default: Any | None = ...): ...
    def insert(self, key, value, allow_increase: bool = ...): ...
