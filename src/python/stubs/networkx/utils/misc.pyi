from typing import Any

def is_string_like(obj): ...
def iterable(obj): ...
def empty_generator(): ...
def flatten(obj, result: Any | None = ...): ...
def make_list_of_ints(sequence): ...
def is_list_of_ints(intlist): ...
def make_str(x): ...
def generate_unique_node(): ...
def default_opener(filename) -> None: ...
def dict_to_numpy_array(d, mapping: Any | None = ...): ...
def dict_to_numpy_array2(d, mapping: Any | None = ...): ...
def dict_to_numpy_array1(d, mapping: Any | None = ...): ...
def is_iterator(obj): ...
def arbitrary_element(iterable): ...
def consume(iterator) -> None: ...
def pairwise(iterable, cyclic: bool = ...): ...
def groups(many_to_one): ...
def to_tuple(x): ...
def create_random_state(random_state: Any | None = ...): ...

class PythonRandomInterface:
    def __init__(self, rng: Any | None = ...) -> None: ...
    def random(self): ...
    def uniform(self, a, b): ...
    def randrange(self, a, b: Any | None = ...): ...
    def choice(self, seq): ...
    def gauss(self, mu, sigma): ...
    def shuffle(self, seq): ...
    def sample(self, seq, k): ...
    def randint(self, a, b): ...
    def expovariate(self, scale): ...
    def paretovariate(self, shape): ...

def create_py_random_state(random_state: Any | None = ...): ...
def nodes_equal(nodes1, nodes2): ...
def edges_equal(edges1, edges2): ...
def graphs_equal(graph1, graph2): ...
