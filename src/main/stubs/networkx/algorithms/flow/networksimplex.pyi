from collections.abc import Generator
from typing import Any

class _DataEssentialsAndFunctions:
    node_list: Any
    node_indices: Any
    node_demands: Any
    edge_sources: Any
    edge_targets: Any
    edge_keys: Any
    edge_indices: Any
    edge_capacities: Any
    edge_weights: Any
    edge_count: Any
    edge_flow: Any
    node_potentials: Any
    parent: Any
    parent_edge: Any
    subtree_size: Any
    next_node_dft: Any
    prev_node_dft: Any
    last_descendent_dft: Any
    def __init__(
        self, G, multigraph, demand: str = ..., capacity: str = ..., weight: str = ...
    ) -> None: ...
    def initialize_spanning_tree(self, n, faux_inf) -> None: ...
    def find_apex(self, p, q): ...
    def trace_path(self, p, w): ...
    def find_cycle(self, i, p, q): ...
    def augment_flow(self, Wn, We, f) -> None: ...
    def trace_subtree(self, p) -> Generator[Any, None, None]: ...
    def remove_edge(self, s, t) -> None: ...
    def make_root(self, q) -> None: ...
    def add_edge(self, i, p, q) -> None: ...
    def update_potentials(self, i, p, q) -> None: ...
    def reduced_cost(self, i): ...
    def find_entering_edges(self) -> Generator[Any, None, None]: ...
    def residual_capacity(self, i, p): ...
    def find_leaving_edge(self, Wn, We): ...

def network_simplex(G, demand: str = ..., capacity: str = ..., weight: str = ...): ...
