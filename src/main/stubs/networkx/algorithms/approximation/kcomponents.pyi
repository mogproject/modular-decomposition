from collections.abc import Generator, Mapping
from typing import Any

import networkx as nx

def k_components(G, min_density: float = ...): ...

class _AntiGraph(nx.Graph):
    all_edge_dict: Any
    def single_edge_dict(self): ...
    edge_attr_dict_factory: Any
    def __getitem__(self, n): ...
    def neighbors(self, n): ...

    class AntiAtlasView(Mapping):
        def __init__(self, graph, node) -> None: ...
        def __len__(self): ...
        def __iter__(self): ...
        def __getitem__(self, nbr): ...

    class AntiAdjacencyView(AntiAtlasView):
        def __init__(self, graph) -> None: ...
        def __len__(self): ...
        def __iter__(self): ...
        def __getitem__(self, node): ...

    @property
    def adj(self): ...
    def subgraph(self, nodes): ...

    class AntiDegreeView(nx.reportviews.DegreeView):
        def __iter__(self): ...
        def __getitem__(self, n): ...

    @property
    def degree(self): ...
    def adjacency(self) -> Generator[Any, None, None]: ...
