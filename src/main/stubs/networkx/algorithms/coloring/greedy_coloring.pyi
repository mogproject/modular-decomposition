from collections.abc import Generator
from typing import Any

def strategy_largest_first(G, colors): ...
def strategy_random_sequential(G, colors, seed: Any | None = ...): ...
def strategy_smallest_last(G, colors): ...
def strategy_independent_set(G, colors) -> None: ...
def strategy_connected_sequential_bfs(G, colors): ...
def strategy_connected_sequential_dfs(G, colors): ...
def strategy_connected_sequential(
    G, colors, traversal: str = ...
) -> Generator[Any, None, None]: ...
def strategy_saturation_largest_first(G, colors) -> Generator[Any, None, Any]: ...
def greedy_color(G, strategy: str = ..., interchange: bool = ...): ...

class _Node:
    node_id: Any
    color: int
    adj_list: Any
    adj_color: Any
    def __init__(self, node_id, n) -> None: ...
    def assign_color(self, adj_entry, color) -> None: ...
    def clear_color(self, adj_entry, color) -> None: ...
    def iter_neighbors(self) -> Generator[Any, None, None]: ...
    def iter_neighbors_color(self, color) -> Generator[Any, None, None]: ...

class _AdjEntry:
    node_id: Any
    next: Any
    mate: Any
    col_next: Any
    col_prev: Any
    def __init__(self, node_id) -> None: ...
